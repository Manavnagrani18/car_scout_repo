3+3+3+3
from passlib.context import CryptContextpwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")hashed_password = pwd_context.hash("adminpass")print(hashed_password)
from passlib.context import CryptContext
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
hashed_password = pwd_context.hash("adminpass")
print(hashed_password)
import os
print(os.getenv("SECRET_KEY"))  # Should not be None
import os
print(os.getenv("SECRET_KEY"))  # Should not be None
from dotenv import load_dotenv
load_dotenv()  # This loads variables from .env
# In Python shell (run in your project directory)from jose import jwtimport osfrom datetime import datetimetoken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbjEiLCJyb2xlIjoiYWRtaW4iLCJleHAiOjE3NDM2NjI3MzF9.Xf_Mk-XQTsC0E9uW5RpvNU8W5XjgFWIaZTmf5VCTl9g"secret = os.getenv("SECRET_KEY", "your-default-secret-key")  # Must match token's secrettry:    payload = jwt.decode(token, secret, algorithms=["HS256"])    print("Token is valid until:", datetime.fromtimestamp(payload["exp"]))    print("User role:", payload["role"])  # Should show "admin"except Exception as e:    print("Token validation failed:", str(e))
print(datetime.fromtimestamp(1743662731))  # Check if this is in the future
# In Python shell (run in your project directory)
from jose import jwt
import os
from datetime import datetime
token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbjEiLCJyb2xlIjoiYWRtaW4iLCJleHAiOjE3NDM2NjI3MzF9.Xf_Mk-XQTsC0E9uW5RpvNU8W5XjgFWIaZTmf5VCTl9g"
secret = os.getenv("SECRET_KEY", "your-default-secret-key")  # Must match token's secret
try:
        payload = jwt.decode(token, secret, algorithms=["HS256"])
            print("Token is valid until:", datetime.fromtimestamp(payload["exp"]))
                print("User role:", payload["role"])  # Should show "admin"
                except Exception as e:
                            print("Token validation failed:", str(e))
                            
